#!/usr/bin/env python3
"""
Enhanced Kali Linux CTF Launcher - –£–ª—É—á—à–µ–Ω–Ω—ã–π launcher –¥–ª—è Kali Linux
–í–µ—Ä—Å–∏—è 3.0 —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π CTF –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
"""

import sys
import subprocess
import os
import json
import time
import shutil
import readline
from datetime import datetime
from pathlib import Path
from utils import *

class EnhancedKaliCTFLauncher:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π launcher –¥–ª—è Kali Linux —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π CTF –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.version = "3.0"
        self.config_file = "launcher_config.json"
        self.history_file = "command_history.json"
        self.profiles_file = "user_profiles.json"
        self.current_profile = "default"
        self.command_history = []
        self.user_profiles = {}
        self.ctf_tools_dir = Path(__file__).parent
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.load_config()
        self.load_history()
        self.load_profiles()
        
        # –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ CTF –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.ctf_tools = {
            # üîì –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ê—Ç–∞–∫–∏
            '1': {
                'name': 'Network Tools (Enhanced)',
                'desc': '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤, –ø–µ—Ä–µ—Ö–≤–∞—Ç —Ç—Ä–∞—Ñ–∏–∫–∞, —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞',
                'script': 'network_tools.py',
                'category': 'Network',
                'examples': [
                    '--target 192.168.1.1 --scan-ports',
                    '--capture capture.pcap --analyze-traffic',
                    '--target 192.168.1.1 --traceroute'
                ]
            },
            '2': {
                'name': 'Web Exploitation',
                'desc': 'SQL injection, XSS, Directory brute-force',
                'script': 'web_exploit.py',
                'category': 'Web',
                'examples': [
                    '--url http://target.com --comprehensive-scan',
                    '--url http://target.com/page.php?id=1 --test-sqli',
                    '--url http://target.com/search?q=test --test-xss'
                ]
            },
            '3': {
                'name': 'Crypto Tools',
                'desc': '–í–∑–ª–æ–º —Ö–µ—à–µ–π, —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ',
                'script': 'crypto_tools.py',
                'category': 'Crypto',
                'examples': [
                    '--crack-hash 5f4dcc3b5aa765d61d8327deb882cf99 --type md5',
                    '--decrypt "U2FsdGVkX1+vupppZksvRf5pq5g5XjFRlipRkwB0K1Y=" --method base64',
                    '--caesar-bruteforce "KHOOR"'
                ]
            },
            '4': {
                'name': 'Advanced Crypto',
                'desc': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã',
                'script': 'advanced_crypto.py',
                'category': 'Crypto',
                'examples': [
                    '--decrypt "encrypted_text" --method aes --key "secretkey"',
                    '--rsa-crack public.pem --private-key private.pem',
                    '--frequency-analysis ciphertext.txt'
                ]
            },
            '5': {
                'name': 'Payload Generator',
                'desc': '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ–π–ª–æ–∞–¥–æ–≤ –¥–ª—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏',
                'script': 'payload_generator.py',
                'category': 'Exploitation',
                'examples': [
                    '--xss --context html',
                    '--reverse-shell 10.10.10.1 4444 --shell-type bash',
                    '--sql-injection --type union'
                ]
            },
            '6': {
                'name': 'Social Engineering',
                'desc': '–§–∏—à–∏–Ω–≥–æ–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–π—Ç–æ–≤',
                'script': 'social_engineering.py',
                'category': 'Social',
                'examples': [
                    '--clone-site http://target.com --output cloned_site',
                    '--phishing-email --template corporate --target user@company.com'
                ]
            },
            
            # üõ°Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ó–∞—â–∏—Ç—ã
            '7': {
                'name': 'Defense Monitor',
                'desc': '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞—Ç–∞–∫',
                'script': 'defense_monitor.py',
                'category': 'Defense',
                'examples': [
                    '--monitor-all',
                    '--analyze-logs /var/log/auth.log',
                    '--check-ports'
                ]
            },
            
            # üîç –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –§–æ—Ä–µ–Ω–∑–∏–∫–∏
            '8': {
                'name': 'Forensics',
                'desc': '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤, –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –∞–Ω–∞–ª–∏–∑ —Ö–µ—à–µ–π',
                'script': 'forensics.py',
                'category': 'Forensics',
                'examples': [
                    '--file suspicious.jpg --analyze',
                    '--file suspicious.jpg --strings',
                    '--file suspicious.jpg --hash'
                ]
            },
            '9': {
                'name': 'Steganography',
                'desc': '–°–∫—Ä—ã—Ç–∏–µ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
                'script': 'steganography.py',
                'category': 'Forensics',
                'examples': [
                    '--file suspicious.jpg --extract',
                    '--file image.png --analyze',
                    '--hide-text "secret message" --image photo.jpg --output hidden.png'
                ]
            },
            '10': {
                'name': 'Malware Analysis',
                'desc': '–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –ü–û',
                'script': 'malware_analysis.py',
                'category': 'Forensics',
                'examples': [
                    '--file suspicious.exe --analyze',
                    '--file malware.bin --strings --min-length 6',
                    '--file virus.exe --yara-scan'
                ]
            },
            
            # üåê OSINT –∏ –†–∞–∑–≤–µ–¥–∫–∞
            '11': {
                'name': 'OSINT Tools',
                'desc': 'WHOIS, DNS –∞–Ω–∞–ª–∏–∑, –ø–æ–∏—Å–∫ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö',
                'script': 'osint_tools.py',
                'category': 'OSINT',
                'examples': [
                    '--whois example.com',
                    '--subdomains example.com',
                    '--username john_doe'
                ]
            },
            '12': {
                'name': 'OSINT Investigator',
                'desc': '–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–ª–æ–≤–µ–∫–µ —á–µ—Ä–µ–∑ Tor',
                'script': 'osint_investigator.py',
                'category': 'OSINT',
                'examples': [
                    '--username john_doe --html-report',
                    '--email john@example.com',
                    '--phone +1234567890 --deep-search'
                ]
            },
            '13': {
                'name': 'Tor Integration',
                'desc': '–ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ Tor',
                'script': 'tor_integration.py',
                'category': 'Privacy',
                'examples': [
                    '--check-tor',
                    '--scan-url https://target.com',
                    '--scan-onion facebookwkhpilnemxj7asaniu7vnjjbiltxjqhye3mhbshg7kx5tfyd.onion'
                ]
            },
            
            # üõ†Ô∏è –£—Ç–∏–ª–∏—Ç—ã
            '14': {
                'name': 'Wordlist Generator',
                'desc': '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞',
                'script': 'wordlist_generator.py',
                'category': 'Utilities',
                'examples': [
                    '--numeric --min 4 --max 6 -o pins.txt',
                    '--common --apply-rules -o passwords.txt',
                    '--custom --input names.txt --output custom_wordlist.txt'
                ]
            },
            '15': {
                'name': 'Kali Integration',
                'desc': '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ Kali Linux',
                'script': 'kali_integration.py',
                'category': 'Integration',
                'examples': [
                    '--list-tools',
                    '--nmap 192.168.1.1 --scan-type aggressive',
                    '--nikto http://target.com',
                    '--john hashes.txt --wordlist /usr/share/wordlists/rockyou.txt'
                ]
            }
        }
        
        self.kali_quick_commands = {
            '1': {
                'name': '–ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏',
                'command': 'python3 kali_integration.py --nmap 192.168.1.0/24 --scan-type basic',
                'desc': '–ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏'
            },
            '2': {
                'name': '–ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–∏',
                'command': 'python3 kali_integration.py --nmap TARGET --scan-type aggressive',
                'desc': '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å OS detection'
            },
            '3': {
                'name': '–í–µ–±-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
                'command': 'python3 kali_integration.py --nikto http://TARGET',
                'desc': '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏'
            },
            '4': {
                'name': 'SQL Injection —Ç–µ—Å—Ç',
                'command': 'python3 kali_integration.py --sqlmap http://TARGET/page.php?id=1',
                'desc': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ SQL injection'
            },
            '5': {
                'name': '–í–∑–ª–æ–º —Ö–µ—à–µ–π',
                'command': 'python3 kali_integration.py --john hashes.txt --wordlist /usr/share/wordlists/rockyou.txt',
                'desc': '–í–∑–ª–æ–º —Ö–µ—à–µ–π —Å –ø–æ–º–æ—â—å—é John the Ripper'
            },
            '6': {
                'name': '–ê–Ω–∞–ª–∏–∑ —Å—Ç–µ–≥–∞–Ω–æ–≥—Ä–∞—Ñ–∏–∏',
                'command': 'python3 kali_integration.py --steghide image.jpg',
                'desc': '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
            },
            '7': {
                'name': '–§–æ—Ä–µ–Ω–∑–∏–∫–∞ —Ñ–∞–π–ª–∞',
                'command': 'python3 kali_integration.py --binwalk suspicious.bin',
                'desc': '–ê–Ω–∞–ª–∏–∑ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞'
            },
            '8': {
                'name': '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è',
                'command': 'python3 wordlist_generator.py --numeric --min 4 --max 6 -o pins.txt',
                'desc': '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è'
            }
        }
    
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    self.current_profile = config.get('current_profile', 'default')
        except Exception as e:
            print_warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            config = {
                'current_profile': self.current_profile,
                'version': self.version,
                'last_updated': datetime.now().isoformat()
            }
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=4, ensure_ascii=False)
        except Exception as e:
            print_warning(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def load_history(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥"""
        try:
            if os.path.exists(self.history_file):
                with open(self.history_file, 'r', encoding='utf-8') as f:
                    self.command_history = json.load(f)
        except Exception as e:
            print_warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            self.command_history = []
    
    def save_history(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥"""
        try:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 100 –∫–æ–º–∞–Ω–¥–∞–º–∏
            if len(self.command_history) > 100:
                self.command_history = self.command_history[-100:]
            
            with open(self.history_file, 'w', encoding='utf-8') as f:
                json.dump(self.command_history, f, indent=4, ensure_ascii=False)
        except Exception as e:
            print_warning(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    def add_to_history(self, command: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        timestamp = datetime.now().isoformat()
        self.command_history.append({
            'command': command,
            'timestamp': timestamp,
            'profile': self.current_profile
        })
        self.save_history()
    
    def load_profiles(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            if os.path.exists(self.profiles_file):
                with open(self.profiles_file, 'r', encoding='utf-8') as f:
                    self.user_profiles = json.load(f)
        except Exception as e:
            print_warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")
            self.user_profiles = {'default': {'name': 'Default Profile', 'favorites': []}}
    
    def save_profiles(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            with open(self.profiles_file, 'w', encoding='utf-8') as f:
                json.dump(self.user_profiles, f, indent=4, ensure_ascii=False)
        except Exception as e:
            print_warning(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")
    
    def check_tool_exists(self, script_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        script_path = self.ctf_tools_dir / script_name
        return script_path.exists()
    
    def show_banner(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–Ω–Ω–µ—Ä Kali Linux"""
        banner = f"""
{Colors.HEADER}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                               ‚ïë
‚ïë            üêâ ENHANCED KALI LINUX CTF LAUNCHER üêâ            ‚ïë
‚ïë                    Version {self.version} - Enhanced Edition                ‚ïë
‚ïë                                                               ‚ïë
‚ïë  –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è CTF –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏           ‚ïë
‚ïë  —Ñ—É–Ω–∫—Ü–∏—è–º–∏: –ø—Ä–æ—Ñ–∏–ª–∏, –∏—Å—Ç–æ—Ä–∏—è, –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ                 ‚ïë
‚ïë                                                               ‚ïë
‚ïë  –ü—Ä–æ—Ñ–∏–ª—å: {self.current_profile:<20} –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(self.ctf_tools):<2}        ‚ïë
‚ïë                                                               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù{Colors.RESET}
"""
        print(banner)
    
    def show_main_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        print(f"\n{Colors.HEADER}{'=' * 60}{Colors.RESET}")
        print(f"{Colors.HEADER}–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ:{Colors.RESET}\n")
        
        print(f"{Colors.SUCCESS}[1-15]{Colors.RESET} CTF –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã ({len(self.ctf_tools)} –¥–æ—Å—Ç—É–ø–Ω–æ)")
        print(f"{Colors.SUCCESS}[C]{Colors.RESET} –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        print(f"{Colors.SUCCESS}[F]{Colors.RESET} –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        print(f"{Colors.SUCCESS}[H]{Colors.RESET} –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥")
        print(f"{Colors.SUCCESS}[P]{Colors.RESET} –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏")
        print(f"{Colors.SUCCESS}[Q]{Colors.RESET} –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã Kali")
        print(f"{Colors.SUCCESS}[K]{Colors.RESET} Kali –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        print(f"{Colors.SUCCESS}[S]{Colors.RESET} –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        print(f"{Colors.SUCCESS}[T]{Colors.RESET} –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        print(f"{Colors.WARNING}[0]{Colors.RESET} –í—ã—Ö–æ–¥\n")
        print(f"{Colors.HEADER}{'=' * 60}{Colors.RESET}")
    
    def show_tools_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
        print(f"\n{Colors.HEADER}{'=' * 60}{Colors.RESET}")
        print(f"{Colors.HEADER}CTF –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:{Colors.RESET}\n")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for key, tool in self.ctf_tools.items():
            category = tool.get('category', 'Other')
            if category not in categories:
                categories[category] = []
            categories[category].append((key, tool))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for category, tools in sorted(categories.items()):
            print(f"{Colors.HEADER}üìÅ {category}:{Colors.RESET}")
            for key, tool in sorted(tools):
                exists = "‚úÖ" if self.check_tool_exists(tool['script']) else "‚ùå"
                print(f"  {Colors.SUCCESS}[{key}]{Colors.RESET} {exists} {tool['name']}")
                print(f"      {Colors.INFO}{tool['desc']}{Colors.RESET}")
            print()
        
        print(f"{Colors.WARNING}[0]{Colors.RESET} –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n")
        print(f"{Colors.HEADER}{'=' * 60}{Colors.RESET}")
    
    def show_categories_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        print(f"\n{Colors.HEADER}{'=' * 60}{Colors.RESET}")
        print(f"{Colors.HEADER}–ö–ê–¢–ï–ì–û–†–ò–ò –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í:{Colors.RESET}\n")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for key, tool in self.ctf_tools.items():
            category = tool.get('category', 'Other')
            if category not in categories:
                categories[category] = []
            categories[category].append((key, tool))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_keys = {}
        for i, (category, tools) in enumerate(sorted(categories.items()), 1):
            category_keys[str(i)] = category
            print(f"{Colors.SUCCESS}[{i}]{Colors.RESET} {category} ({len(tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤)")
            for key, tool in tools:
                exists = "‚úÖ" if self.check_tool_exists(tool['script']) else "‚ùå"
                print(f"    {Colors.INFO}{exists} {tool['name']}{Colors.RESET}")
            print()
        
        print(f"{Colors.WARNING}[0]{Colors.RESET} –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n")
        print(f"{Colors.HEADER}{'=' * 60}{Colors.RESET}")
        
        return category_keys
    
    def show_favorites_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"""
        print(f"\n{Colors.HEADER}{'=' * 60}{Colors.RESET}")
        print(f"{Colors.HEADER}–ò–ó–ë–†–ê–ù–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:{Colors.RESET}\n")
        
        if self.current_profile not in self.user_profiles:
            self.user_profiles[self.current_profile] = {'name': self.current_profile, 'favorites': []}
        
        favorites = self.user_profiles[self.current_profile].get('favorites', [])
        
        if not favorites:
            print(f"{Colors.WARNING}–ù–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –ø—Ä–æ—Ñ–∏–ª–µ '{self.current_profile}'{Colors.RESET}")
            print(f"{Colors.INFO}–î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤{Colors.RESET}")
        else:
            for i, tool_key in enumerate(favorites, 1):
                if tool_key in self.ctf_tools:
                    tool = self.ctf_tools[tool_key]
                    exists = "‚úÖ" if self.check_tool_exists(tool['script']) else "‚ùå"
                    print(f"{Colors.SUCCESS}[{i}]{Colors.RESET} {exists} {tool['name']}")
                    print(f"    {Colors.INFO}{tool['desc']}{Colors.RESET}")
                else:
                    print(f"{Colors.ERROR}[{i}] –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {tool_key}{Colors.RESET}")
        
        print(f"\n{Colors.WARNING}[0]{Colors.RESET} –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n")
        print(f"{Colors.HEADER}{'=' * 60}{Colors.RESET}")
    
    def show_history_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥"""
        print(f"\n{Colors.HEADER}{'=' * 60}{Colors.RESET}")
        print(f"{Colors.HEADER}–ò–°–¢–û–†–ò–Ø –ö–û–ú–ê–ù–î:{Colors.RESET}\n")
        
        if not self.command_history:
            print(f"{Colors.WARNING}–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ –ø—É—Å—Ç–∞{Colors.RESET}")
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∫–æ–º–∞–Ω–¥
            recent_history = self.command_history[-20:]
            for i, entry in enumerate(reversed(recent_history), 1):
                timestamp = entry.get('timestamp', 'Unknown')
                command = entry.get('command', 'Unknown')
                profile = entry.get('profile', 'default')
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                try:
                    dt = datetime.fromisoformat(timestamp)
                    time_str = dt.strftime("%H:%M:%S")
                except:
                    time_str = "Unknown"
                
                print(f"{Colors.SUCCESS}[{i}]{Colors.RESET} {time_str} | {profile}")
                print(f"    {Colors.INFO}{command}{Colors.RESET}")
        
        print(f"\n{Colors.WARNING}[0]{Colors.RESET} –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n")
        print(f"{Colors.HEADER}{'=' * 60}{Colors.RESET}")
    
    def show_profiles_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è–º–∏"""
        print(f"\n{Colors.HEADER}{'=' * 60}{Colors.RESET}")
        print(f"{Colors.HEADER}–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø–ú–ò:{Colors.RESET}\n")
        
        print(f"{Colors.INFO}–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å: {Colors.SUCCESS}{self.current_profile}{Colors.RESET}\n")
        
        print(f"{Colors.SUCCESS}[1]{Colors.RESET} –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å")
        print(f"{Colors.SUCCESS}[2]{Colors.RESET} –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
        print(f"{Colors.SUCCESS}[3]{Colors.RESET} –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
        print(f"{Colors.SUCCESS}[4]{Colors.RESET} –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏")
        print(f"{Colors.WARNING}[0]{Colors.RESET} –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n")
        print(f"{Colors.HEADER}{'=' * 60}{Colors.RESET}")
    
    def show_tools_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        print(f"\n{Colors.HEADER}{'=' * 60}{Colors.RESET}")
        print(f"{Colors.HEADER}–ü–†–û–í–ï–†–ö–ê –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í:{Colors.RESET}\n")
        
        available = 0
        missing = 0
        
        for key, tool in self.ctf_tools.items():
            script_path = self.ctf_tools_dir / tool['script']
            if script_path.exists():
                print(f"{Colors.SUCCESS}‚úÖ{Colors.RESET} {tool['name']} - {tool['script']}")
                available += 1
            else:
                print(f"{Colors.ERROR}‚ùå{Colors.RESET} {tool['name']} - {tool['script']} (–ù–ï –ù–ê–ô–î–ï–ù)")
                missing += 1
        
        print(f"\n{Colors.HEADER}–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:{Colors.RESET}")
        print(f"{Colors.SUCCESS}–î–æ—Å—Ç—É–ø–Ω–æ: {available}{Colors.RESET}")
        print(f"{Colors.ERROR}–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {missing}{Colors.RESET}")
        print(f"{Colors.INFO}–í—Å–µ–≥–æ: {available + missing}{Colors.RESET}")
        
        print(f"\n{Colors.WARNING}[0]{Colors.RESET} –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n")
        print(f"{Colors.HEADER}{'=' * 60}{Colors.RESET}")
    
    def show_quick_commands(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –±—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
        print(f"\n{Colors.HEADER}{'=' * 60}{Colors.RESET}")
        print(f"{Colors.HEADER}–ë–´–°–¢–†–´–ï –ö–û–ú–ê–ù–î–´ KALI:{Colors.RESET}\n")
        
        for key, cmd in self.kali_quick_commands.items():
            print(f"{Colors.SUCCESS}[{key}]{Colors.RESET} {cmd['name']}")
            print(f"    {Colors.INFO}{cmd['desc']}{Colors.RESET}")
            print(f"    {Colors.WARNING}–ö–æ–º–∞–Ω–¥–∞: {cmd['command']}{Colors.RESET}\n")
        
        print(f"{Colors.WARNING}[0]{Colors.RESET} –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n")
        print(f"{Colors.HEADER}{'=' * 60}{Colors.RESET}")
    
    def show_kali_tools(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ Kali –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"""
        print(f"\n{Colors.HEADER}{'=' * 60}{Colors.RESET}")
        print(f"{Colors.HEADER}KALI –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:{Colors.RESET}\n")
        
        try:
            subprocess.run(['python3', 'kali_integration.py', '--list-tools'], check=True)
        except:
            print_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ Kali –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        
        print(f"\n{Colors.WARNING}[0]{Colors.RESET} –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n")
        print(f"{Colors.HEADER}{'=' * 60}{Colors.RESET}")
    
    def show_system_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        print(f"\n{Colors.HEADER}{'=' * 60}{Colors.RESET}")
        print(f"{Colors.HEADER}–°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:{Colors.RESET}\n")
        
        try:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
            print_info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:")
            subprocess.run(['uname', '-a'], check=True)
            
            print_info("\n–í–µ—Ä—Å–∏—è Kali Linux:")
            subprocess.run(['cat', '/etc/os-release'], check=True)
            
            print_info("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:")
            subprocess.run(['ip', 'addr', 'show'], check=True)
            
            print_info("\n–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:")
            subprocess.run(['netstat', '-tuln'], check=True)
            
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        
        print(f"\n{Colors.WARNING}[0]{Colors.RESET} –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n")
        print(f"{Colors.HEADER}{'=' * 60}{Colors.RESET}")
    
    def run_tool(self, tool_key: str):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"""
        if tool_key not in self.ctf_tools:
            print_error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            return
        
        tool = self.ctf_tools[tool_key]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        if not self.check_tool_exists(tool['script']):
            print_error(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool['script']} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            print_info("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'T' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
            input(f"\n{Colors.WARNING}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{Colors.RESET}")
            return
        
        clear_screen()
        print_banner(tool['name'])
        
        print(f"\n{Colors.INFO}–û–ø–∏—Å–∞–Ω–∏–µ:{Colors.RESET}")
        print(f"  {tool['desc']}")
        print(f"\n{Colors.INFO}–ö–∞—Ç–µ–≥–æ—Ä–∏—è:{Colors.RESET}")
        print(f"  {tool.get('category', 'Other')}")
        print(f"\n{Colors.INFO}–°–∫—Ä–∏–ø—Ç:{Colors.RESET}")
        print(f"  {tool['script']}")
        
        print(f"\n{Colors.INFO}–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:{Colors.RESET}")
        for i, example in enumerate(tool['examples'], 1):
            print(f"  {i}. python3 {tool['script']} {example}")
        
        print(f"\n{Colors.INFO}–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:{Colors.RESET}")
        print(f"  python3 {tool['script']} --help\n")
        
        print(f"\n{Colors.HEADER}{'=' * 60}{Colors.RESET}")
        print(f"{Colors.WARNING}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:{Colors.RESET}\n")
        print(f"{Colors.SUCCESS}[1]{Colors.RESET} –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
        print(f"{Colors.SUCCESS}[2]{Colors.RESET} –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É (--help)")
        print(f"{Colors.SUCCESS}[3]{Colors.RESET} –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
        print(f"{Colors.SUCCESS}[4]{Colors.RESET} –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å –ø—Ä–∏–º–µ—Ä–æ–º")
        print(f"{Colors.SUCCESS}[0]{Colors.RESET} –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n")
        
        choice = input(f"{Colors.INFO}–í–∞—à –≤—ã–±–æ—Ä: {Colors.RESET}").strip()
        
        if choice == '1':
            params = input(f"\n{Colors.INFO}–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {Colors.RESET}").strip()
            cmd = f"python3 {tool['script']} {params}"
            print(f"\n{Colors.INFO}–ó–∞–ø—É—Å–∫: {cmd}{Colors.RESET}\n")
            print(f"{Colors.HEADER}{'=' * 60}{Colors.RESET}\n")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.add_to_history(cmd)
            
            try:
                subprocess.run(cmd, shell=True)
            except KeyboardInterrupt:
                print_warning("\n–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            except Exception as e:
                print_error(f"–û—à–∏–±–∫–∞: {e}")
        
        elif choice == '2':
            cmd = f"python3 {tool['script']} --help"
            print(f"\n{Colors.HEADER}{'=' * 60}{Colors.RESET}\n")
            subprocess.run(cmd, shell=True)
        
        elif choice == '3':
            self.add_to_favorites(tool_key)
        
        elif choice == '4':
            self.run_with_example(tool)
        
        input(f"\n{Colors.WARNING}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{Colors.RESET}")
    
    def add_to_favorites(self, tool_key: str):
        """–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        if self.current_profile not in self.user_profiles:
            self.user_profiles[self.current_profile] = {'name': self.current_profile, 'favorites': []}
        
        favorites = self.user_profiles[self.current_profile]['favorites']
        if tool_key not in favorites:
            favorites.append(tool_key)
            self.save_profiles()
            print_success(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—Ä–æ—Ñ–∏–ª—è '{self.current_profile}'")
        else:
            print_warning("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
    
    def run_with_example(self, tool: dict):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å –ø—Ä–∏–º–µ—Ä–æ–º"""
        print(f"\n{Colors.INFO}–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä:{Colors.RESET}")
        for i, example in enumerate(tool['examples'], 1):
            print(f"  {i}. {example}")
        
        try:
            choice = int(input(f"\n{Colors.INFO}–ù–æ–º–µ—Ä –ø—Ä–∏–º–µ—Ä–∞ [1-{len(tool['examples'])}]: {Colors.RESET}"))
            if 1 <= choice <= len(tool['examples']):
                example = tool['examples'][choice - 1]
                cmd = f"python3 {tool['script']} {example}"
                print(f"\n{Colors.INFO}–ó–∞–ø—É—Å–∫: {cmd}{Colors.RESET}\n")
                print(f"{Colors.HEADER}{'=' * 60}{Colors.RESET}\n")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.add_to_history(cmd)
                
                subprocess.run(cmd, shell=True)
            else:
                print_error("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–∏–º–µ—Ä–∞")
        except ValueError:
            print_error("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
        except KeyboardInterrupt:
            print_warning("\n–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞: {e}")
    
    def run_quick_command(self, cmd_key: str):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ã—Å—Ç—Ä—É—é –∫–æ–º–∞–Ω–¥—É"""
        if cmd_key not in self.kali_quick_commands:
            print_error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            return
        
        cmd_info = self.kali_quick_commands[cmd_key]
        
        print(f"\n{Colors.HEADER}{'=' * 60}{Colors.RESET}")
        print(f"{Colors.HEADER}{cmd_info['name']}{Colors.RESET}\n")
        print(f"{Colors.INFO}–û–ø–∏—Å–∞–Ω–∏–µ: {cmd_info['desc']}{Colors.RESET}")
        print(f"{Colors.WARNING}–ö–æ–º–∞–Ω–¥–∞: {cmd_info['command']}{Colors.RESET}\n")
        
        # –ó–∞–º–µ–Ω—è–µ–º TARGET –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        if 'TARGET' in cmd_info['command']:
            target = input(f"{Colors.INFO}–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å (TARGET): {Colors.RESET}").strip()
            if not target:
                print_error("–¶–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞!")
                return
            cmd = cmd_info['command'].replace('TARGET', target)
        else:
            cmd = cmd_info['command']
        
        print(f"\n{Colors.INFO}–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {cmd}{Colors.RESET}\n")
        print(f"{Colors.HEADER}{'=' * 60}{Colors.RESET}\n")
        
        try:
            subprocess.run(cmd, shell=True)
        except KeyboardInterrupt:
            print_warning("\n–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞: {e}")
        
        input(f"\n{Colors.WARNING}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{Colors.RESET}")
    
    def run(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª"""
        while True:
            clear_screen()
            self.show_banner()
            self.show_main_menu()
            
            choice = input(f"\n{Colors.INFO}–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: {Colors.RESET}").strip().upper()
            
            if choice == '0':
                self.save_config()
                print_success("–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ CTF! üêâ")
                sys.exit(0)
            
            elif choice in ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15']:
                self.run_tool(choice)
            
            elif choice == 'C':
                self.handle_categories_menu()
            
            elif choice == 'F':
                self.handle_favorites_menu()
            
            elif choice == 'H':
                while True:
                    clear_screen()
                    self.show_history_menu()
                    input(f"\n{Colors.WARNING}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{Colors.RESET}")
                    break
            
            elif choice == 'P':
                self.handle_profiles_menu()
            
            elif choice == 'Q':
                while True:
                    clear_screen()
                    self.show_quick_commands()
                    cmd_choice = input(f"\n{Colors.INFO}–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É [0-8]: {Colors.RESET}").strip()
                    
                    if cmd_choice == '0':
                        break
                    elif cmd_choice in self.kali_quick_commands:
                        self.run_quick_command(cmd_choice)
                    else:
                        print_error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
                        time.sleep(1)
            
            elif choice == 'K':
                while True:
                    clear_screen()
                    self.show_kali_tools()
                    input(f"\n{Colors.WARNING}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{Colors.RESET}")
                    break
            
            elif choice == 'S':
                while True:
                    clear_screen()
                    self.show_system_info()
                    input(f"\n{Colors.WARNING}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{Colors.RESET}")
                    break
            
            elif choice == 'T':
                while True:
                    clear_screen()
                    self.show_tools_check()
                    input(f"\n{Colors.WARNING}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{Colors.RESET}")
                    break
            
            else:
                print_error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
                time.sleep(1)
    
    def handle_categories_menu(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        while True:
            clear_screen()
            category_keys = self.show_categories_menu()
            choice = input(f"\n{Colors.INFO}–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é [0-{len(category_keys)}]: {Colors.RESET}").strip()
            
            if choice == '0':
                break
            elif choice in category_keys:
                category = category_keys[choice]
                self.show_category_tools(category)
            else:
                print_error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
                time.sleep(1)
    
    def show_category_tools(self, category: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        print(f"\n{Colors.HEADER}{'=' * 60}{Colors.RESET}")
        print(f"{Colors.HEADER}–ö–ê–¢–ï–ì–û–†–ò–Ø: {category.upper()}{Colors.RESET}\n")
        
        tools_in_category = []
        for key, tool in self.ctf_tools.items():
            if tool.get('category', 'Other') == category:
                tools_in_category.append((key, tool))
        
        for key, tool in sorted(tools_in_category):
            exists = "‚úÖ" if self.check_tool_exists(tool['script']) else "‚ùå"
            print(f"{Colors.SUCCESS}[{key}]{Colors.RESET} {exists} {tool['name']}")
            print(f"    {Colors.INFO}{tool['desc']}{Colors.RESET}")
        
        print(f"\n{Colors.WARNING}[0]{Colors.RESET} –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n")
        print(f"{Colors.HEADER}{'=' * 60}{Colors.RESET}")
        
        choice = input(f"\n{Colors.INFO}–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {Colors.RESET}").strip()
        if choice != '0' and choice in [key for key, _ in tools_in_category]:
            self.run_tool(choice)
    
    def handle_favorites_menu(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö"""
        while True:
            clear_screen()
            self.show_favorites_menu()
            
            if self.current_profile not in self.user_profiles:
                self.user_profiles[self.current_profile] = {'name': self.current_profile, 'favorites': []}
            
            favorites = self.user_profiles[self.current_profile].get('favorites', [])
            
            if not favorites:
                input(f"\n{Colors.WARNING}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{Colors.RESET}")
                break
            
            choice = input(f"\n{Colors.INFO}–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç [0-{len(favorites)}]: {Colors.RESET}").strip()
            
            if choice == '0':
                break
            elif choice.isdigit() and 1 <= int(choice) <= len(favorites):
                tool_key = favorites[int(choice) - 1]
                if tool_key in self.ctf_tools:
                    self.run_tool(tool_key)
                else:
                    print_error("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    time.sleep(1)
            else:
                print_error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
                time.sleep(1)
    
    def handle_profiles_menu(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        while True:
            clear_screen()
            self.show_profiles_menu()
            choice = input(f"\n{Colors.INFO}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ [0-4]: {Colors.RESET}").strip()
            
            if choice == '0':
                break
            elif choice == '1':
                self.create_profile()
            elif choice == '2':
                self.switch_profile()
            elif choice == '3':
                self.delete_profile()
            elif choice == '4':
                self.show_all_profiles()
            else:
                print_error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
                time.sleep(1)
    
    def create_profile(self):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å"""
        name = input(f"\n{Colors.INFO}–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è: {Colors.RESET}").strip()
        if name and name not in self.user_profiles:
            self.user_profiles[name] = {'name': name, 'favorites': []}
            self.save_profiles()
            print_success(f"–ü—Ä–æ—Ñ–∏–ª—å '{name}' —Å–æ–∑–¥–∞–Ω")
        elif name in self.user_profiles:
            print_error("–ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print_error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è")
        input(f"\n{Colors.WARNING}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{Colors.RESET}")
    
    def switch_profile(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"""
        if len(self.user_profiles) <= 1:
            print_warning("–°–æ–∑–¥–∞–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è")
            input(f"\n{Colors.WARNING}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{Colors.RESET}")
            return
        
        print(f"\n{Colors.INFO}–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏:{Colors.RESET}")
        profiles = list(self.user_profiles.keys())
        for i, profile in enumerate(profiles, 1):
            marker = " (—Ç–µ–∫—É—â–∏–π)" if profile == self.current_profile else ""
            print(f"  {i}. {profile}{marker}")
        
        try:
            choice = int(input(f"\n{Colors.INFO}–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å [1-{len(profiles)}]: {Colors.RESET}"))
            if 1 <= choice <= len(profiles):
                new_profile = profiles[choice - 1]
                if new_profile != self.current_profile:
                    self.current_profile = new_profile
                    self.save_config()
                    print_success(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å '{new_profile}'")
                else:
                    print_warning("–≠—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω")
            else:
                print_error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        except ValueError:
            print_error("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
        
        input(f"\n{Colors.WARNING}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{Colors.RESET}")
    
    def delete_profile(self):
        """–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"""
        if len(self.user_profiles) <= 1:
            print_warning("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å")
            input(f"\n{Colors.WARNING}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{Colors.RESET}")
            return
        
        print(f"\n{Colors.INFO}–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏:{Colors.RESET}")
        profiles = list(self.user_profiles.keys())
        for i, profile in enumerate(profiles, 1):
            marker = " (—Ç–µ–∫—É—â–∏–π)" if profile == self.current_profile else ""
            print(f"  {i}. {profile}{marker}")
        
        try:
            choice = int(input(f"\n{Colors.INFO}–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è [1-{len(profiles)}]: {Colors.RESET}"))
            if 1 <= choice <= len(profiles):
                profile_to_delete = profiles[choice - 1]
                if profile_to_delete == self.current_profile:
                    print_error("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å")
                else:
                    if get_user_confirmation(f"–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å '{profile_to_delete}'?"):
                        del self.user_profiles[profile_to_delete]
                        self.save_profiles()
                        print_success(f"–ü—Ä–æ—Ñ–∏–ª—å '{profile_to_delete}' —É–¥–∞–ª–µ–Ω")
            else:
                print_error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        except ValueError:
            print_error("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
        
        input(f"\n{Colors.WARNING}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{Colors.RESET}")
    
    def show_all_profiles(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏"""
        print(f"\n{Colors.HEADER}{'=' * 60}{Colors.RESET}")
        print(f"{Colors.HEADER}–í–°–ï –ü–†–û–§–ò–õ–ò:{Colors.RESET}\n")
        
        for profile_name, profile_data in self.user_profiles.items():
            marker = " (—Ç–µ–∫—É—â–∏–π)" if profile_name == self.current_profile else ""
            print(f"{Colors.SUCCESS}üìÅ {profile_name}{marker}{Colors.RESET}")
            favorites = profile_data.get('favorites', [])
            print(f"    –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(favorites)}")
            if favorites:
                for fav in favorites:
                    if fav in self.ctf_tools:
                        tool_name = self.ctf_tools[fav]['name']
                        print(f"      - {tool_name}")
            print()
        
        print(f"{Colors.WARNING}[0]{Colors.RESET} –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è–º–∏\n")
        print(f"{Colors.HEADER}{'=' * 60}{Colors.RESET}")
        
        input(f"\n{Colors.WARNING}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{Colors.RESET}")

def main():
    try:
        launcher = EnhancedKaliCTFLauncher()
        launcher.run()
    except KeyboardInterrupt:
        print(f"\n{Colors.WARNING}–í—ã—Ö–æ–¥...{Colors.RESET}")
        sys.exit(0)
    except Exception as e:
        print_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()

